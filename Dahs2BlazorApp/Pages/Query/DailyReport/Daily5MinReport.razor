@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Buttons
@using System.ComponentModel.DataAnnotations
@using Dahs2BlazorApp.Models
@inject PipeIo PipeIo
@inject MonitorTypeIo MonitorTypeIo
@inject ILogger<DailyReport> Logger
@inject ExcelUtility ExcelUtility
@inject RecordIo RecordIo
@inject MeasuringAdjust MeasuringAdjust
@inject IJSRuntime JsRuntime

<PageTitle>@Title</PageTitle>
<div class="row g-0">
    <div class="col-lg-6 col-md-8 col-sm-12">
        <SfCard>
            <CardContent>
                <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    @*<div class="row mb-1">
                        <label class="col-md-2 col-form-label" for="Pipe">煙道</label>
                        <div class="col-md-10">
                            <SfDropDownList ID="Pipe" TValue="int" TItem="IPipe" @bind-value="@_model.PipeId"
                                            DataSource="@PipeIo.Pipes">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => _model.PipeId)"/>
                        </div>
                    </div>*@
                    <div class="row mb-1">
                        <label class="col-md-2 col-form-label" for="MonitorTypes">測項</label>
                        <div class="col-md-10">
                            <SfDropDownList ID="MonitorTypes" TValue="string" TItem="IMonitorType"
                                            @bind-value="@_model.MonitorType"
                                            DataSource="@MonitorTypes">
                                <DropDownListFieldSettings Value="Sid" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="row mb-1">
                        <label class="col-md-2 col-form-label" for="DateStart">查詢日期</label>
                        <div class="col-md-10">
                            <SfDatePicker TValue="DateTime" ID="DateStart" @bind-Value="@_model.Start"
                                          Max="DateTime.Today"></SfDatePicker>
                        </div>
                    </div>
                    <div class="row mb-1">
                        <div class="offset-2 col-md-10">
                            <SfCheckBox ID="WithStatus" Label="包含狀態" @bind-Checked="_model.WithStatus"></SfCheckBox>
                            <SfCheckBox ID="Excel" Label="下載Excel" @bind-Checked="_model.DownloadExcel"></SfCheckBox>
                        </div>
                    </div>
                    <div class="row mb-1">
                        <div class="offset-md-2">
                            <SfProgressButton Content="查詢" IsPrimary="true">
                                <ProgressButtonSpinSettings Position="SpinPosition.Right"
                                                            Width="20"></ProgressButtonSpinSettings>
                            </SfProgressButton>
                        </div>
                    </div>
                </EditForm>
            </CardContent>
        </SfCard>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12">
        @if (DisplayReport)
        {
            <table class="table table-bordered table-sm table-striped text-center">
                <thead>
                <tr>
                    <th>小時\分鐘</th>
                    @foreach (var time in timeSlots)
                    {
                        @if (_model.WithStatus)
                        {
                            <th colspan="2">@($"{time:00}")</th>
                        }
                        else
                        {
                            <th>@($"{time:00}")</th>
                        }
                    }
                </tr>
                <tr>
                    <th></th>
                    @foreach (var time in timeSlots)
                    {
                        <th>測值</th>
                        @if (_model.WithStatus)
                        {
                            <th>狀態</th>
                        }
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (var hour in hours)
                {
                    <tr>
                        <th>@($"{hour:00}~{hour+1:00}")</th>
                        @foreach (var time in timeSlots)
                        {
                            var key = _model.Start.AddHours(hour).AddMinutes(time);
                            if(key>DateTime.Now)
                            {
                                <td></td>
                                @if (_model.WithStatus)
                                {
                                    <td></td>
                                }
                                continue;
                            }
                            
                            if (_dailyRecordMap.TryGetValue(key, out var mtRecordMap))
                            {
                                var record = mtRecordMap[_model.MonitorType];
                                <td>@(record.Value.HasValue ? $"{record.Value:F2}" : "-")</td>
                                @if (_model.WithStatus)
                                {
                                    <td>@record.Status</td>
                                }
                            }
                            else
                            {
                                <td>-</td>
                                @if (_model.WithStatus)
                                {
                                    <td>-</td>
                                }
                            }
                        }
                    </tr>
                }
            <tr><th>排放標準</th>
                <td colspan="3">@MonitorTypeIo.PipeMonitorTypeMap[1][_model.MonitorType].Standard</td>
            </tr>
                <tr><th>最大值</th>
                    <td colspan="3">@GetMax(_model.MonitorType)</td>
                </tr>
                <tr><th>最小值</th>
                    <td colspan="3">@GetMin(_model.MonitorType)</td>
                </tr>
                <tr><th>平均值</th>
                    <td colspan="3">@GetAverage(_model.MonitorType)</td>
                </tr>
                <tr><th>超限次數</th>
                    <td colspan="3">@GetOverCount(_model.MonitorType)</td>
                </tr>
                </tbody>
            </table>
        }
    </div>
</div>
<br/>

@code {
    private const string Title = "5分鐘日報查詢";

    [CascadingParameter] SfToast? ToastObj { get; set; }

    private List<IMonitorType> MonitorTypes => MonitorTypeIo.PipeMonitorTypeMap[1].Values.ToList();

    public class QueryModel
    {
        [Required(ErrorMessage = "請選擇煙道")] public int PipeId { get; set; }
        [Required(ErrorMessage = "請選擇測項")] public string MonitorType { get; set; }
        [Required(ErrorMessage = "請選擇日期")] public required DateTime Start { get; set; }
        public bool WithStatus { get; set; }
        public bool DownloadExcel { get; set; }
    }

    int[] timeSlots = { 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55 };
    List<int> hours = Enumerable.Range(0, 24).ToList();

    private readonly QueryModel _model = new()
    {
        PipeId = SiteConfig.DefaultPipes[0].Id,
        MonitorType = "WashFlow",
        Start = DateTime.Today.AddDays(-1)
    };

    private bool DisplayReport { get; set; } = false;
    
    private Dictionary<DateTime, Dictionary<string, Record>> _dailyRecordMap = new();

    string GetRange(string sid)
    {
        var mt = MonitorTypeIo.PipeMonitorTypeMap[1][sid];

        if (mt.Alarm.HasValue && mt.AlarmLow.HasValue)
        {
            return $"{mt.AlarmLow:F0}~{mt.Alarm:F0}";
        }

        if (mt.Alarm.HasValue)
        {
            return $"{mt.Alarm:F0}\u2193";
        }

        if (mt.AlarmLow.HasValue)
        {
            return $"\u2191{mt.AlarmLow:F0}";
        }

        return "";
    }

    async void OnValidSubmit()
    {
        try
        {
            _dailyRecordMap = await MeasuringAdjust.Get5MinData(1, _model.Start, _model.Start.AddDays(1));
            DisplayReport = true;

            StateHasChanged();
            if(_model.DownloadExcel)
            {
                var excel = _model.WithStatus? ExcelUtility.Export5MinDailyReportWithStatus(_model.Start, _model.MonitorType, _dailyRecordMap):
                    ExcelUtility.Export5MinDailyReport(_model.Start, _model.MonitorType, _dailyRecordMap);
                var streamRef = new DotNetStreamReference(stream: File.OpenRead(excel));
                var fileName = $"{_model.Start:yyyyMMdd}_{MonitorTypeIo.PipeMonitorTypeMap[1][_model.MonitorType].Name}五分鐘日報表.xlsx";
                await JsRuntime.InvokeVoidAsync("downloadStream", fileName, streamRef);    
            }
        }
        catch (Exception ex)
        {
            ToastObj?.ShowAsync(new ToastModel
            {
                Title = "錯誤",
                Content = $"查詢失敗 {ex.Message}",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });

            Logger.LogError(ex, "Fail to get daily report");
        }
    }

    string GetAverage(string sid)
    {
        var values = _dailyRecordMap.Values.Where(dict => dict.ContainsKey(sid) && dict[sid].Value.HasValue)
            .Select(dict => dict[sid].Value!.Value).ToArray();
        return values.Length > 0 ? $"{values.Average():F2}" : "-";
    }

    string GetMax(string sid)
    {
        var values = _dailyRecordMap.Values.Where(dict => dict.ContainsKey(sid) && dict[sid].Value.HasValue)
            .Select(dict => dict[sid].Value!.Value).ToArray();
        return values.Length > 0 ? $"{values.Max():F2}" : "-";
    }

    string GetMin(string sid)
    {
        var values = _dailyRecordMap.Values.Where(dict => dict.ContainsKey(sid) && dict[sid].Value.HasValue)
            .Select(dict => dict[sid].Value!.Value).ToArray();
        return values.Length > 0 ? $"{values.Min():F2}" : "-";
    }

    string GetValidRate(string sid)
    {
        var validStatuses = new[] { "00", "01", "02", "10", "11" };
        var validCount = _dailyRecordMap.Values.Count(dict => dict.ContainsKey(sid) && validStatuses.Contains(dict[sid].Status));
        var totalCount = _dailyRecordMap.Values.Count(dict => dict.ContainsKey(sid));
        return totalCount > 0 ? $"{validCount / totalCount * 100:F2}%" : "-";
    }

    int GetOverCount(string sid)
    {
        return _dailyRecordMap.Values
            .Count(dict => dict.ContainsKey(sid) && dict[sid].Value.HasValue && dict[sid].Status == "11");
    }

}