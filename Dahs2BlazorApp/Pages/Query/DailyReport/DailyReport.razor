@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Buttons
@using System.ComponentModel.DataAnnotations
@using Dahs2BlazorApp.Models
@inject PipeIo PipeIo
@inject MonitorTypeIo MonitorTypeIo
@inject ILogger<DailyReport> Logger
@inject ExcelUtility ExcelUtility
@inject RecordIo RecordIo
@inject IJSRuntime JsRuntime

<PageTitle>@Title</PageTitle>
<div class="row g-0">
    <div class="col-lg-6 col-md-8 col-sm-12">
        <SfCard>
            <CardContent>
                <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    @*<div class="row mb-1">
                        <label class="col-md-2 col-form-label" for="Pipe">煙道</label>
                        <div class="col-md-10">
                            <SfDropDownList ID="Pipe" TValue="int" TItem="IPipe" @bind-value="@_model.PipeId"
                                            DataSource="@PipeIo.Pipes">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => _model.PipeId)"/>
                        </div>
                    </div>*@
                    <div class="row mb-1">
                        <label class="col-md-2 col-form-label" for="DateStart">查詢日期</label>
                        <div class="col-md-10">
                            <SfDatePicker TValue="DateTime" ID="DateStart" @bind-Value="@_model.Start"
                                          Max="DateTime.Today"></SfDatePicker>
                        </div>
                    </div>
                    <div class="row mb-1">
                        <div class="offset-2 col-md-10">
                            <SfCheckBox ID="WithStatus" Label="包含狀態" @bind-Checked="_model.WithStatus"></SfCheckBox>
                            <SfCheckBox ID="Excel" Label="下載Excel" @bind-Checked="_model.DownloadExcel"></SfCheckBox>
                        </div>
                    </div>
                    <div class="row mb-1">
                        <div class="offset-md-2">
                            <SfProgressButton Content="查詢" IsPrimary="true">
                                <ProgressButtonSpinSettings Position="SpinPosition.Right"
                                                            Width="20"></ProgressButtonSpinSettings>
                            </SfProgressButton>
                        </div>
                    </div>
                </EditForm>
            </CardContent>
        </SfCard>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12">
        @if (DisplayReport)
        {
            <table class="table table-bordered table-sm table-striped text-center">
                <thead>
                <tr>
                    <th>項　目</th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">E501
                        操作溫度
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">E501
                        出口溫度
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">E502
                        出口溫度
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">P501
                        一氧化碳
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">P501
                        氧氣
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">A501
                        入口溫度
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">A501
                        差壓
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">A501
                        秤重模組
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">A502
                        洗滌液流率
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">A502
                        pH值
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">A502
                        差壓
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">P501
                        排氣風量
                    </th>
                    <th colspan="@(_model.WithStatus ? 2 : 1)">A502
                        換水量
                    </th>
                </tr>
                </thead>
                <tbody>

                <tr>
                    <th>單位</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@MonitorTypeIo.PipeMonitorTypeMap[1][mt].Unit2</td>
                    }
                </tr>
                <tr>
                    <th>排放標準/操作條件</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@GetRange(mt)</td>
                    }
                </tr>


                @foreach (var hr in Enumerable.Range(0, 24))
                {
                    <tr>
                        <th>@($"{hr:00}~{hr + 1:00}")</th>
                        @foreach (var mt in mtList)
                        {
                            @if (_dailyRecordMap.TryGetValue(_model.Start.AddHours(hr), out var hourRecordMap))
                            {
                                <td class="@GetOutOfRangeCssClass(mt, hourRecordMap[mt].Value)">@hourRecordMap[mt].Value</td>
                                @if (_model.WithStatus)
                                {
                                    <td>@hourRecordMap[mt].Status</td>
                                }
                            }
                            else
                            {
                                <td>-</td>
                                @if (_model.WithStatus)
                                {
                                    <td>-</td>
                                }
                            }
                        }
                    </tr>
                }
                <tr>
                    <th>監測時數</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@_dailyRecordMap.Values.Count(dict => dict.ContainsKey(mt))</td>
                    }
                </tr>
                <tr>
                    <th>超限次數</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@_dailyRecordMap.Values.Count(dict => dict.ContainsKey(mt) && dict[mt].Status == "11")</td>
                    }
                </tr>
                <tr>
                    <th>有效時數</th>
                    @foreach (var mt in mtList)
                    {
                        var validStatuses = new[] { "00", "01", "02", "10", "11" };
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@_dailyRecordMap.Values.Count(dict => dict.ContainsKey(mt) && validStatuses.Contains(dict[mt].Status))</td>
                    }
                </tr>
                <tr>
                    <th>平均值</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@GetAverage(mt)</td>
                    }
                </tr>
                <tr>
                    <th>最大值</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@GetMax(mt)</td>
                    }
                </tr>
                <tr>
                    <th>最小值</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@GetMin(mt)</td>
                    }
                </tr>
                <tr>
                    <th>有效比率</th>
                    @foreach (var mt in mtList)
                    {
                        <td colspan="@(_model.WithStatus ? 2 : 1)">@GetValidRate(mt)</td>
                    }
                </tr>
                </tbody>
            </table>
        }
    </div>
</div>
<br/>

@code {
    private const string Title = "日報查詢";

    [CascadingParameter] SfToast? ToastObj { get; set; }

    public class QueryModel
    {
        [Required(ErrorMessage = "請選擇煙道")] public int PipeId { get; set; }

        [Required(ErrorMessage = "請選擇日期")] public required DateTime Start { get; set; }
        public bool WithStatus { get; set; }
        public bool DownloadExcel { get; set; }
    }

    private readonly QueryModel _model = new()
    {
        PipeId = SiteConfig.DefaultPipes[0].Id,
        Start = DateTime.Today.AddDays(-1),
        DownloadExcel = false
    };

    private bool DisplayReport { get; set; } = false;

    List<string> mtList =
        new()
        {
            MonitorTypeCode.OpTemp.ToString(),
            MonitorTypeCode.BurnerTemp.ToString(),
            MonitorTypeCode.SecondTemp.ToString(),
            MonitorTypeCode.A24.ToString(),
            MonitorTypeCode.E36.ToString(),
            MonitorTypeCode.BFTemp.ToString(),
            MonitorTypeCode.BFPressDiff.ToString(),
            MonitorTypeCode.BFWeightMod.ToString(),
            MonitorTypeCode.WashFlow.ToString(),
            MonitorTypeCode.PH.ToString(),
            MonitorTypeCode.WashTowerPressDiff.ToString(),
            MonitorTypeCode.F48.ToString(),
            MonitorTypeCode.WaterQuantity.ToString(),
        };

    record NormalRange(decimal? Low = null, decimal? High = null);

    Dictionary<string, NormalRange> mtRangeMap = new()
    {
        { MonitorTypeCode.BurnerTemp.ToString(), new NormalRange(850, 1150) },
        { MonitorTypeCode.SecondTemp.ToString(), new NormalRange(850) },
        { MonitorTypeCode.A24.ToString(), new NormalRange(null, 100) },
        { MonitorTypeCode.E36.ToString(), new NormalRange(6) },
        { MonitorTypeCode.BFTemp.ToString(), new NormalRange(150, 200) },
        { MonitorTypeCode.BFPressDiff.ToString(), new NormalRange(10, 70) },
        { MonitorTypeCode.BFWeightMod.ToString(), new NormalRange(1.58m, 2.45m) },
        { MonitorTypeCode.WashFlow.ToString(), new NormalRange(900, 1200) },
        { MonitorTypeCode.PH.ToString(), new NormalRange(7, 9) },
        { MonitorTypeCode.WashTowerPressDiff.ToString(), new NormalRange(10, 80) },
        { MonitorTypeCode.F48.ToString(), new NormalRange(100, 230) }
    };

    private Dictionary<DateTime, Dictionary<string, Record>> _dailyRecordMap = new();

    string GetRange(string sid)
    {
        var mt = MonitorTypeIo.PipeMonitorTypeMap[1][sid];

        if (mt.Sid == "OpTemp")
            return "";

        if (mt.Sid == MonitorTypeCode.BFWeightMod.ToString())
            return "1.58~2.45";

        if (mt.Sid == "F48")
        {
            return "100~230";
        }
        
        if (mt.Alarm.HasValue && mt.AlarmLow.HasValue)
        {
            return $"{mt.AlarmLow:F0}~{mt.Alarm:F0}";
        }

        if (mt.Alarm.HasValue)
        {
            return $"{mt.Alarm:F0}\u2193";
        }

        if (mt.AlarmLow.HasValue)
        {
            return $"\u2191{mt.AlarmLow:F0}";
        }

        return "";
    }

    async void OnValidSubmit()
    {
        try
        {
            _dailyRecordMap = await RecordIo.GetData(TableType.AdjustedData60, 1, mtList, _model.Start, _model.Start.AddDays(1));

            DisplayReport = true;

            StateHasChanged();
            if (!_model.DownloadExcel) return;

            var excel =
                ExcelUtility.ExportDailyReport(_model.Start, _dailyRecordMap);
            var streamRef = new DotNetStreamReference(stream: File.OpenRead(excel));
            var fileName = $"{_model.Start:yyyyMMdd}_小時平均日報表.xlsx";
            await JsRuntime.InvokeVoidAsync("downloadStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            ToastObj?.ShowAsync(new ToastModel
            {
                Title = "錯誤",
                Content = $"查詢失敗 {ex.Message}",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });

            Logger.LogError(ex, "Fail to get daily report");
        }
    }

    string GetAverage(string sid)
    {
        var values = _dailyRecordMap.Values.Where(dict => dict.ContainsKey(sid) && dict[sid].Value.HasValue)
            .Select(dict => dict[sid].Value!.Value).ToArray();
        return values.Length > 0 ? $"{values.Average():F2}" : "-";
    }

    string GetMax(string sid)
    {
        var values = _dailyRecordMap.Values.Where(dict => dict.ContainsKey(sid) && dict[sid].Value.HasValue)
            .Select(dict => dict[sid].Value!.Value).ToArray();
        return values.Length > 0 ? $"{values.Max():F2}" : "-";
    }

    string GetMin(string sid)
    {
        var values = _dailyRecordMap.Values.Where(dict => dict.ContainsKey(sid) && dict[sid].Value.HasValue)
            .Select(dict => dict[sid].Value!.Value).ToArray();
        return values.Length > 0 ? $"{values.Min():F2}" : "-";
    }

    string GetValidRate(string sid)
    {
        var validStatuses = new[] { "00", "01", "02", "10", "11" };
        var validCount = _dailyRecordMap.Values.Count(dict => dict.ContainsKey(sid) && validStatuses.Contains(dict[sid].Status));
        var totalCount = _dailyRecordMap.Values.Count(dict => dict.ContainsKey(sid));
        return totalCount > 0 ? $"{(double)validCount * 100 / totalCount:F2}%" : "-";
    }

    string GetOutOfRangeCssClass(string sid, decimal? value)
    {
        if (!mtRangeMap.TryGetValue(sid, out var range)) return "";
        if (!value.HasValue) return "";
        
        if (range.Low.HasValue && value < range.Low)
        {
            return "text-danger";
        }

        if (range.High.HasValue && value > range.High)
        {
            return "text-danger";
        }

        return "";
    }
}